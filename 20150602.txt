package plc;

/*Construa um programa onde N threads incrementam
 contadores locais (não-compartilhados) em um laço. Cada 
 thread imprime o valor de seu contador a cada incremento. 

 As threads param quando seus contadores chegam a um 
 valor limite X, recebido como entrada pelo programa.

 – Por que as saídas das threads se misturam?

 Agora mude seu programa para que as threads modifiquem 
 um contador global compartilhado entre elas. 

 – O que acontece com os resultados?*/

public class Exercicio extends Thread {
	static int count = 0;
	private Thread[] tArray;
	
	public Exercicio(){}
	public Exercicio(Thread[] tArray){
		this.tArray = tArray;
	}

	public void run() {

		for (int i = 0; i < 25; i++) {
			count++;
			System.out.println(getName() + " - " + count);
			try {
				sleep(1);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		if (count == 5) {
			for (int i = 0; i < this.tArray.length; i++) {
			if(tArray[i].getId() != getId())
			tArray[i].interrupt();
			}
		}
		
	}

	public static void main(String args[]) {

		Exercicio t0 = new Exercicio();
		Exercicio t1 = new Exercicio();
		Exercicio t2 = new Exercicio();
		Exercicio t3 = new Exercicio();

		Thread[] at = {t0,t1,t2,t3};
		
		t0.tArray = at;
		t1.tArray = at;
		t2.tArray = at;
		t3.tArray = at;
		
		Thread t = new Exercicio(at);
		/*t.start();
		t0.start();t1.start();
		t2.start();
		t3.start();*/
		try {
			t.join(); // main thread waits for t to finish

		} catch (InterruptedException ie) {
		}

	}
	
	
	
	
}
class Tred extends Thread{
	public void run(){}
}
